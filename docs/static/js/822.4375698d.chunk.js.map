{"version":3,"file":"static/js/822.4375698d.chunk.js","mappings":"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","sources":["features/chat/ChatWidget/ChatWidget.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport {\n  MessageCircle,\n  X,\n  Send,\n  Phone,\n  Video,\n  Paperclip,\n  Smile,\n  Search,\n  ArrowLeft,\n  Reply,\n  Check,\n  CheckCheck,\n} from 'lucide-react';\nimport { chatService } from '../../../shared/services/chat.service';\nimport { Chat, Message } from '../../../shared/types';\nimport { authService } from '../../../shared/services/auth.service';\nimport { useSocket } from '../../../app/providers/SocketContext';\nimport { useNavigate } from 'react-router-dom';\n\n// Extended Message type for local state management\ninterface LocalMessage extends Message {\n  tempId?: string;\n}\n\nconst ChatWidget: React.FC = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [chats, setChats] = useState<Chat[]>([]);\n  const [selectedChat, setSelectedChat] = useState<Chat | null>(null);\n  const [messages, setMessages] = useState<LocalMessage[]>([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [replyingTo, setReplyingTo] = useState<Message | null>(null);\n  const [isTyping, setIsTyping] = useState(false);\n  const [otherUserTyping, setOtherUserTyping] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const typingTimeoutRef = useRef<NodeJS.Timeout>();\n  const currentUser = authService.getUser();\n  const navigate = useNavigate();\n\n  // Use SocketContext instead of socketService\n  const { \n    isConnected, \n    on, \n    off, \n    sendMessage: socketSendMessage, \n    sendTyping, \n    joinChat, \n    leaveChat \n  } = useSocket();\n\n  // Auth check\n  useEffect(() => {\n    setIsAuthenticated(authService.isAuthenticated());\n  }, []);\n\n  useEffect(() => {\n    if (isAuthenticated) loadChats();\n  }, [isAuthenticated]);\n\n  // Load messages when chat is selected\n  useEffect(() => {\n    if (selectedChat) {\n      loadMessages(selectedChat._id);\n      // Join the chat room when selecting a chat\n      joinChat(selectedChat._id);\n    }\n    \n    // Leave previous chat when switching\n    return () => {\n      if (selectedChat) {\n        leaveChat(selectedChat._id);\n      }\n    };\n  }, [selectedChat, joinChat, leaveChat]);\n\n  // Scroll to bottom on new messages\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n\n  // Typing indicator logic\n  useEffect(() => {\n    if (selectedChat && isTyping) {\n      if (typingTimeoutRef.current) clearTimeout(typingTimeoutRef.current);\n      typingTimeoutRef.current = setTimeout(() => {\n        setIsTyping(false);\n        sendTyping(selectedChat._id, false);\n      }, 1000);\n    }\n    return () => {\n      if (typingTimeoutRef.current) clearTimeout(typingTimeoutRef.current);\n    };\n  }, [isTyping, selectedChat, sendTyping]);\n\n  // --- SOCKET LISTENERS: Always active ---\n  useEffect(() => {\n    // Typing: only update if relevant chat is open\n    const handleTyping = (data: { chatId: string; isTyping: boolean; userId: string }) => {\n      if (selectedChat && data.chatId === selectedChat._id && data.userId !== currentUser?._id) {\n        setOtherUserTyping(data.isTyping);\n      }\n    };\n\n    // New message: always update unread count and show notification\n    const handleNewMessage = (message: Message) => {\n      console.log('New message received:', message);\n      \n      // Check if message already exists to prevent duplicates\n      setMessages(prev => {\n        const existingMessage = prev.find(msg => msg._id === message._id);\n        if (existingMessage) {\n          console.log('Message already exists, skipping duplicate');\n          return prev;\n        }\n        \n        // If the selected chat is open, add message to messages\n        if (selectedChat && message.chatId === selectedChat._id) {\n          return [...prev, message];\n        }\n        return prev;\n      });\n      \n      // Always update unread count for the relevant chat\n      setChats(prevChats =>\n        prevChats.map(chat =>\n          chat._id === message.chatId\n            ? { ...chat, unreadCount: (chat.unreadCount || 0) + 1, lastMessage: message }\n            : chat\n        )\n      );\n      \n      // Show toast if the message is for a chat that's not currently open\n      if (!selectedChat || message.chatId !== selectedChat._id) {\n        window.dispatchEvent(\n          new CustomEvent('toast', {\n            detail: {\n              type: 'notification',\n              message: `New message from ${message.sender.firstName}: ${message.content}`,\n            },\n          })\n        );\n      }\n    };\n\n    const handleMessageDelivered = (data: { tempId: string; messageId: string; timestamp: Date }) => {\n      console.log('Message delivered:', data);\n      // Update message status in the UI if needed\n      setMessages(prev => \n        prev.map(msg => {\n          if (msg.tempId === data.tempId) {\n            return { \n              ...msg, \n              _id: data.messageId, \n              deliveredTo: [...(msg.deliveredTo || []), currentUser?._id!],\n              tempId: undefined // Remove tempId once message is delivered\n            } as LocalMessage;\n          }\n          return msg;\n        })\n      );\n    };\n\n    const handleMessageError = (data: { tempId: string; error: string }) => {\n      console.error('Message error:', data);\n      // Remove the failed message from UI or mark it as failed\n      setMessages(prev => \n        prev.filter(msg => msg.tempId !== data.tempId)\n      );\n      \n      // Handle message send error - maybe show retry option\n      window.dispatchEvent(\n        new CustomEvent('toast', {\n          detail: {\n            type: 'error',\n            message: `Failed to send message: ${data.error}`,\n          },\n        })\n      );\n    };\n\n    const handleMessagesRead = (data: { chatId: string; messageIds: string[]; readBy: string; readAt: Date }) => {\n      console.log('Messages read:', data);\n      // Update read status for messages\n      if (selectedChat && data.chatId === selectedChat._id) {\n        setMessages(prev =>\n          prev.map(msg => {\n            if (data.messageIds.includes(msg._id)) {\n              return {\n                ...msg,\n                readBy: [...(msg.readBy || []), data.readBy]\n              } as LocalMessage;\n            }\n            return msg;\n          })\n        );\n      }\n    };\n\n    // Register event listeners\n    on('userTyping', handleTyping);\n    on('newMessage', handleNewMessage);\n    on('messageDelivered', handleMessageDelivered);\n    on('messageError', handleMessageError);\n    on('messagesRead', handleMessagesRead);\n\n    return () => {\n      // Cleanup event listeners\n      off('userTyping', handleTyping);\n      off('newMessage', handleNewMessage);\n      off('messageDelivered', handleMessageDelivered);\n      off('messageError', handleMessageError);\n      off('messagesRead', handleMessagesRead);\n    };\n  }, [selectedChat, currentUser, on, off]);\n\n  // --- Data Loaders ---\n  const loadChats = async () => {\n    try {\n      setLoading(true);\n      const response = await chatService.getUserChats();\n      const chatsData = response.data?.chats || response.data?.items || [];\n      setChats(chatsData);\n    } catch (error) {\n      console.error('Failed to load chats:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadMessages = async (chatId: string) => {\n    try {\n      setLoading(true);\n      const response = await chatService.getChatMessages(chatId);\n      const messagesData = response.data?.messages || response.data?.items || [];\n      setMessages(messagesData);\n    } catch (error) {\n      console.error('Failed to load messages:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // --- Input & Send ---\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setNewMessage(e.target.value);\n    if (!isTyping && e.target.value.trim()) {\n      setIsTyping(true);\n      if (selectedChat) sendTyping(selectedChat._id, true);\n    } else if (isTyping && !e.target.value.trim()) {\n      setIsTyping(false);\n      if (selectedChat) sendTyping(selectedChat._id, false);\n    }\n  };\n\n  const sendMessageHandler = async () => {\n    if (!newMessage.trim() || !selectedChat) return;\n    \n    try {\n      // Generate a temporary ID for optimistic updates\n      const tempId = `temp_${Date.now()}_${Math.random()}`;\n      \n      // Optimistically add message to UI\n      const optimisticMessage: LocalMessage = {\n        _id: tempId,\n        tempId,\n        chatId: selectedChat._id,\n        sender: {\n          ...currentUser!,\n          lastSeen: currentUser?.lastSeen ? new Date(currentUser.lastSeen) : undefined\n        },\n        content: newMessage.trim(),\n        messageType: 'text',\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        replyTo: replyingTo ? {\n          _id: replyingTo._id,\n          content: replyingTo.content || '',\n          sender: {\n            ...replyingTo.sender,\n            lastSeen: replyingTo.sender.lastSeen ? new Date(replyingTo.sender.lastSeen) : undefined\n          }\n        } : undefined,\n        deliveredTo: [],\n        readBy: [],\n        isDeleted: false\n      };\n      \n      setMessages(prev => [...prev, optimisticMessage]);\n      \n      // Send via socket\n      socketSendMessage({\n        chatId: selectedChat._id,\n        content: newMessage.trim(),\n        replyTo: replyingTo?._id,\n        tempId\n      });\n      \n      setNewMessage('');\n      setReplyingTo(null);\n      setIsTyping(false);\n      sendTyping(selectedChat._id, false);\n    } catch (error) {\n      console.error('Failed to send message:', error);\n    }\n  };  const handleKeyPress = (e: React.KeyboardEvent) => {    if (e.key === 'Enter') {      e.preventDefault();\n      sendMessageHandler();\n    }\n  };\n\n  // --- Helpers ---\n  const formatTime = (date: Date | string) =>\n    new Date(date).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n\n  const formatLastSeen = (date: Date | string) => {\n    const now = new Date();\n    const lastSeen = new Date(date);\n    const diffInMinutes = Math.floor((now.getTime() - lastSeen.getTime()) / (1000 * 60));\n    if (diffInMinutes < 1) return 'just now';\n    if (diffInMinutes < 60) return `${diffInMinutes}m ago`;\n    if (diffInMinutes < 1440) return `${Math.floor(diffInMinutes / 60)}h ago`;\n    return lastSeen.toLocaleDateString();\n  };\n\n  const getParticipantName = (chat: Chat) => {\n    if (chat.type === 'group') return chat.groupName || 'Group Chat';\n    const other = chat.participants.find(p => p._id !== currentUser?._id);\n    return other ? `${other.firstName} ${other.lastName}` : 'Unknown';\n  };\n\n  const getParticipantAvatar = (chat: Chat) => {\n    if (chat.type === 'group') return chat.groupName?.charAt(0).toUpperCase() || 'G';\n    const other = chat.participants.find(p => p._id !== currentUser?._id);\n    return other\n      ? `${other.firstName.charAt(0)}${other.lastName.charAt(0)}`.toUpperCase()\n      : 'U';\n  };\n\n  const isParticipantOnline = (chat: Chat) => {\n    if (chat.type === 'group') return false;\n    const other = chat.participants.find(p => p._id !== currentUser?._id);\n    return other?.isOnline || false;\n  };\n\n  const getMessageStatus = (message: LocalMessage) => {\n    if (message.sender._id !== currentUser?._id) return null;\n    if (message.readBy && message.readBy.length > 0) {\n      return <CheckCheck className=\"w-3 h-3 text-blue-400\" />;\n    }\n    if (message.deliveredTo && message.deliveredTo.length > 0) {\n      return <CheckCheck className=\"w-3 h-3 text-gray-400\" />;\n    }\n    return <Check className=\"w-3 h-3 text-gray-400\" />;\n  };\n\n  const filteredChats = chats.filter(chat =>\n    getParticipantName(chat).toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  // Generate unique key for messages\n  const getMessageKey = (message: LocalMessage) => {\n    return message.tempId || message._id;\n  };\n\n  // --- UI ---\n  if (!isAuthenticated) {\n    return (\n      <div className=\"fixed bottom-4 right-4 z-50\">\n        <motion.button\n          whileHover={{ scale: 1.1 }}\n          whileTap={{ scale: 0.9 }}\n          onClick={() => navigate('/signup')}\n          className=\"bg-green-500 hover:bg-green-600 text-white p-4 rounded-full shadow-lg\"\n        >\n          <MessageCircle size={24} />\n        </motion.button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"fixed bottom-4 right-4 z-50\">\n      <AnimatePresence>\n        {!isOpen && (\n          <motion.button\n            initial={{ scale: 0 }}\n            animate={{ scale: 1 }}\n            exit={{ scale: 0 }}\n            whileHover={{ scale: 1.1 }}\n            whileTap={{ scale: 0.9 }}\n            onClick={() => {\n              if (!isAuthenticated) {\n                navigate('/signup');\n              } else {\n                setIsOpen(true);\n              }\n            }}\n            className={`p-4 rounded-full shadow-lg relative ${\n              isConnected \n                ? 'bg-green-500 hover:bg-green-600' \n                : 'bg-gray-500 hover:bg-gray-600'\n            } text-white`}\n          >\n            <MessageCircle size={24} />\n            {/* Connection status indicator */}\n            <div className={`absolute top-0 right-0 w-3 h-3 rounded-full border-2 border-white ${\n              isConnected ? 'bg-green-400' : 'bg-red-400'\n            }`} />\n            {/* Badge for total unread messages */}\n            {chats.reduce((count, chat) => count + (chat.unreadCount || 0), 0) > 0 && (\n              <div className=\"absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full w-6 h-6 flex items-center justify-center\">\n                {chats.reduce((count, chat) => count + (chat.unreadCount || 0), 0) > 99\n                  ? '99+'\n                  : chats.reduce((count, chat) => count + (chat.unreadCount || 0), 0)}\n              </div>\n            )}\n          </motion.button>\n        )}\n      </AnimatePresence>\n\n      <AnimatePresence>\n        {isOpen && (\n          <motion.div\n            initial={{ opacity: 0, scale: 0.8, y: 20 }}\n            animate={{ opacity: 1, scale: 1, y: 0 }}\n            exit={{ opacity: 0, scale: 0.8, y: 20 }}\n            className=\"bg-white dark:bg-gray-800 rounded-lg shadow-2xl w-96 h-[600px] flex flex-col overflow-hidden border border-gray-200 dark:border-gray-700\"\n          >\n            {/* Header */}\n            <div className=\"bg-green-600 dark:bg-green-700 text-white p-4 flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3\">\n                {selectedChat && (\n                  <button\n                    onClick={() => setSelectedChat(null)}\n                    className=\"p-1 hover:bg-green-700 dark:hover:bg-green-600 rounded\"\n                  >\n                    <ArrowLeft size={20} />\n                  </button>\n                )}\n                <div>\n                  <h3 className=\"font-semibold\">\n                    {selectedChat ? getParticipantName(selectedChat) : 'WhatsApp'}\n                  </h3>\n                  {selectedChat && (\n                    <p className=\"text-xs text-green-100\">\n                      {isParticipantOnline(selectedChat) ? 'online' :\n                        selectedChat.participants.find(p => p._id !== currentUser?._id)?.lastSeen ?\n                          `last seen ${formatLastSeen(selectedChat.participants.find(p => p._id !== currentUser?._id)!.lastSeen!)}` :\n                          'offline'}\n                    </p>\n                  )}\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                {/* Connection status indicator */}\n                <div className={`w-2 h-2 rounded-full ${isConnected ? 'bg-green-300' : 'bg-red-300'}`} \n                     title={isConnected ? 'Connected' : 'Disconnected'} />\n                \n                {selectedChat && (\n                  <>\n                    <button\n                      onClick={() => {/* handle audio call */}}\n                      className=\"p-2 hover:bg-green-700 dark:hover:bg-green-600 rounded\"\n                      title=\"Audio Call\"\n                    >\n                      <Phone size={18} />\n                    </button>\n                    <button\n                      onClick={() => {/* handle video call */}}\n                      className=\"p-2 hover:bg-green-700 dark:hover:bg-green-600 rounded\"\n                      title=\"Video Call\"\n                    >\n                      <Video size={18} />\n                    </button>\n                  </>\n                )}\n                <button\n                  onClick={() => setIsOpen(false)}\n                  className=\"p-2 hover:bg-green-700 dark:hover:bg-green-600 rounded\"\n                  title=\"Close\"\n                >\n                  <X size={18} />\n                </button>\n              </div>\n            </div>\n\n            <div className=\"flex-1 overflow-hidden\">\n              {!selectedChat ? (\n                // Chat List\n                <div className=\"h-full flex flex-col\">\n                  {/* Search */}\n                  <div className=\"p-3 bg-gray-50 dark:bg-gray-900\">\n                    <div className=\"relative\">\n                      <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={16} />\n                      <input\n                        type=\"text\"\n                        placeholder=\"Search or start new chat\"\n                        value={searchTerm}\n                        onChange={(e) => setSearchTerm(e.target.value)}\n                        className=\"w-full pl-9 pr-4 py-2 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-green-500 dark:text-white\"\n                      />\n                    </div>\n                  </div>\n\n                  {/* Chat List */}\n                  <div className=\"flex-1 overflow-y-auto\">\n                    {loading ? (\n                      <div className=\"flex items-center justify-center h-full\">\n                        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-green-600\"></div>\n                      </div>\n                    ) : filteredChats.length === 0 ? (\n                      <div className=\"flex items-center justify-center h-full text-gray-500 dark:text-gray-400\">\n                        <div className=\"text-center\">\n                          <MessageCircle size={48} className=\"mx-auto mb-4 opacity-50\" />\n                          <p>No conversations yet</p>\n                          <p className=\"text-sm\">Tap the new chat button to start messaging</p>\n                        </div>\n                      </div>\n                    ) : (\n                      filteredChats.map((chat) => (\n                        <motion.div\n                          key={chat._id}\n                          whileHover={{ backgroundColor: 'rgba(0, 0, 0, 0.05)' }}\n                          onClick={() => setSelectedChat(chat)}\n                          className=\"p-3 border-b border-gray-100 dark:border-gray-700 cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-700\"\n                        >\n                          <div className=\"flex items-center space-x-3\">\n                            <div className=\"relative\">\n                              <div className=\"w-12 h-12 bg-gray-300 dark:bg-gray-600 rounded-full flex items-center justify-center text-gray-700 dark:text-gray-300 font-semibold\">\n                                {getParticipantAvatar(chat)}\n                              </div>\n                              {isParticipantOnline(chat) && (\n                                <div className=\"absolute bottom-0 right-0 w-3 h-3 bg-green-500 rounded-full border-2 border-white dark:border-gray-800\"></div>\n                              )}\n                            </div>\n                            <div className=\"flex-1 min-w-0\">\n                              <div className=\"flex items-center justify-between\">\n                                <p className=\"text-sm font-medium text-gray-900 dark:text-white truncate\">\n                                  {getParticipantName(chat)}\n                                </p>\n                                {chat.lastMessage && (\n                                  <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                                    {formatTime(chat.lastMessage.createdAt)}\n                                  </p>\n                                )}\n                              </div>\n                              <div className=\"flex items-center justify-between\">\n                                <p className=\"text-sm text-gray-500 dark:text-gray-400 truncate\">\n                                  {chat.lastMessage?.content || 'Tap to start messaging'}\n                                </p>\n                                {chat.unreadCount > 0 && (\n                                  <div className=\"bg-green-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center ml-2\">\n                                    {chat.unreadCount > 99 ? '99+' : chat.unreadCount}\n                                  </div>\n                                )}\n                              </div>\n                            </div>\n                          </div>\n                        </motion.div>\n                      ))\n                    )}\n                  </div>\n                </div>\n              ) : (\n                // Messages View\n                <div className=\"h-full flex flex-col\">\n                  {/* Messages */}\n                  <div\n                    className=\"flex-1 overflow-y-auto p-4 space-y-2 chat-messages\"\n                    style={{\n                      backgroundImage: `url(\"data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23e5ddd5' fill-opacity='0.4'%3E%3Ccircle cx='30' cy='30' r='1'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\")`,\n                      backgroundColor: '#e5ddd5'\n                    }}\n                    data-messages-container\n                  >\n                    {messages.map((message) => {\n                      const isOwn = message.sender._id === currentUser?._id;\n                      return (\n                        <motion.div\n                          key={getMessageKey(message)}\n                          initial={{ opacity: 0, y: 10 }}\n                          animate={{ opacity: 1, y: 0 }}\n                          className={`flex ${isOwn ? 'justify-end' : 'justify-start'} group`}\n                        >\n                          <div className={`max-w-xs px-3 py-2 rounded-lg shadow-sm relative ${\n                            isOwn\n                              ? 'bg-green-500 text-white'\n                              : 'bg-white text-gray-900'\n                            } ${message.tempId ? 'opacity-70' : ''}`}\n                            style={{\n                              borderRadius: isOwn ? '7.5px 7.5px 7.5px 0px' : '7.5px 7.5px 0px 7.5px'\n                            }}>\n                            {message.replyTo && (\n                              <div className={`mb-2 p-2 rounded border-l-4 text-xs ${\n                                isOwn\n                                  ? 'bg-green-600 border-green-300'\n                                  : 'bg-gray-100 border-gray-400'\n                                }`}>\n                                <p className=\"font-medium opacity-80\">{message.replyTo.sender.firstName}</p>\n                                <p className=\"truncate opacity-70\">{message.replyTo.content}</p>\n                              </div>\n                            )}\n\n                            {message.content && (\n                              <p className=\"text-sm leading-relaxed\">{message.content}</p>\n                            )}\n\n                            {message.media && message.media.length > 0 && (\n                              <div className=\"mt-2 space-y-2\">\n                                {message.media.map((file) => (\n                                  <div key={file._id}>\n                                    {file.mimetype.startsWith('image/') ? (\n                                      <img\n                                        src={file.url}\n                                        alt={file.originalName}\n                                        className=\"max-w-full h-auto rounded\"\n                                      />\n                                    ) : (\n                                      <a\n                                        href={file.url}\n                                        target=\"_blank\"\n                                        rel=\"noopener noreferrer\"\n                                        className=\"flex items-center space-x-2 text-xs underline\"\n                                      >\n                                        <Paperclip size={12} />\n                                        <span>{file.originalName}</span>\n                                      </a>\n                                    )}\n                                  </div>\n                                ))}\n                              </div>\n                            )}\n\n                            <div className=\"flex items-center justify-end mt-1 space-x-1\">\n                              <span className={`text-xs ${isOwn ? 'text-green-100' : 'text-gray-500'}`}>\n                                {formatTime(message.createdAt)}\n                              </span>\n                              {isOwn && (\n                                <div className=\"text-green-100\">\n                                  {getMessageStatus(message)}\n                                </div>\n                              )}\n                            </div>\n\n                            {!isOwn && (\n                              <button\n                                onClick={() => setReplyingTo(message)}\n                                className=\"absolute right-2 top-2 opacity-0 group-hover:opacity-100 p-1 bg-gray-200 hover:bg-gray-300 rounded transition-opacity\"\n                              >\n                                <Reply size={12} />\n                              </button>\n                            )}\n                          </div>\n                        </motion.div>\n                      );\n                    })}\n\n                    {/* Typing Indicator for other user */}\n                    {otherUserTyping && (\n                      <div className=\"flex justify-start\">\n                        <div className=\"bg-white rounded-lg px-4 py-2 shadow-sm\">\n                          <div className=\"flex space-x-1\">\n                            <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\"></div>\n                            <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }}></div>\n                            <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }}></div>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n\n                    <div ref={messagesEndRef} />\n                  </div>\n\n                  {/* Reply Preview */}\n                  {replyingTo && (\n                    <div className=\"px-4 py-2 bg-gray-100 dark:bg-gray-700 border-l-4 border-green-500\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-xs font-medium text-green-600 dark:text-green-400\">\n                            Replying to {replyingTo.sender.firstName}\n                          </p>\n                          <p className=\"text-sm text-gray-600 dark:text-gray-300 truncate\">\n                            {replyingTo.content}\n                          </p>\n                        </div>\n                        <button\n                          onClick={() => setReplyingTo(null)}\n                          className=\"text-gray-400 hover:text-gray-600\"\n                        >\n                          <X size={16} />\n                        </button>\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Message Input */}\n                  <div className=\"p-3 bg-gray-50 dark:bg-gray-900\">\n                    <div className=\"flex items-center space-x-2\">\n                      <button className=\"p-2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200\">\n                        <Paperclip size={20} />\n                      </button>\n\n                      <div className=\"flex-1 relative\">\n                        <input\n                          type=\"text\"\n                          value={newMessage}\n                          onChange={handleInputChange}\n                          onKeyPress={handleKeyPress}\n                          placeholder={isConnected ? \"Type a message\" : \"Connecting...\"}\n                          disabled={!isConnected}\n                          className=\"w-full px-4 py-2 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-full focus:outline-none focus:ring-2 focus:ring-green-500 dark:text-white disabled:opacity-50 disabled:cursor-not-allowed\"\n                        />\n                      </div>\n\n                      <button className=\"p-2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200\">\n                        <Smile size={20} />\n                      </button>\n\n                      <button\n                        onClick={sendMessageHandler}\n                        disabled={!newMessage.trim() || !isConnected}\n                        className=\"p-2 bg-green-500 text-white rounded-full hover:bg-green-600 disabled:opacity-50 disabled:cursor-not-allowed\"\n                      >\n                        <Send size={18} />\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};\n\nexport default ChatWidget;"],"names":["ChatWidget","_selectedChat$partici","isOpen","setIsOpen","useState","isAuthenticated","setIsAuthenticated","chats","setChats","selectedChat","setSelectedChat","messages","setMessages","newMessage","setNewMessage","searchTerm","setSearchTerm","loading","setLoading","replyingTo","setReplyingTo","isTyping","setIsTyping","otherUserTyping","setOtherUserTyping","messagesEndRef","useRef","typingTimeoutRef","currentUser","authService","getUser","navigate","useNavigate","isConnected","on","off","sendMessage","socketSendMessage","sendTyping","joinChat","leaveChat","useSocket","useEffect","loadChats","loadMessages","_id","_messagesEndRef$curre","current","scrollIntoView","behavior","clearTimeout","setTimeout","handleTyping","data","chatId","userId","handleNewMessage","message","console","log","prev","find","msg","prevChats","map","chat","_objectSpread","unreadCount","lastMessage","window","dispatchEvent","CustomEvent","detail","type","concat","sender","firstName","content","handleMessageDelivered","tempId","messageId","deliveredTo","undefined","handleMessageError","error","filter","handleMessagesRead","messageIds","includes","readBy","async","_response$data","_response$data2","response","chatService","getUserChats","chatsData","items","_response$data3","_response$data4","getChatMessages","messagesData","sendMessageHandler","trim","Date","now","Math","random","optimisticMessage","lastSeen","messageType","createdAt","updatedAt","replyTo","isDeleted","formatTime","date","toLocaleTimeString","hour","minute","getParticipantName","groupName","other","participants","p","lastName","getParticipantAvatar","_chat$groupName","charAt","toUpperCase","isParticipantOnline","isOnline","getMessageStatus","length","_jsx","CheckCheck","className","Check","filteredChats","toLowerCase","_jsxs","children","AnimatePresence","motion","button","initial","scale","animate","exit","whileHover","whileTap","onClick","MessageCircle","size","reduce","count","div","opacity","y","ArrowLeft","diffInMinutes","floor","getTime","toLocaleDateString","formatLastSeen","title","_Fragment","Phone","Video","X","style","backgroundImage","backgroundColor","isOwn","borderRadius","media","file","mimetype","startsWith","src","url","alt","originalName","href","target","rel","Paperclip","Reply","getMessageKey","animationDelay","ref","value","onChange","e","onKeyPress","key","preventDefault","placeholder","disabled","Smile","Send","Search","_chat$lastMessage"],"sourceRoot":""}